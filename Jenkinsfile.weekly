pipeline {
    agent none
    options {
	parallelsAlwaysFailFast()
    }
    stages {
	// "gatesgarth", "dunfell", "zeus", "warrior", "thud", "sumo", "rocko", "pyro", "morty", "krogoth", "jethro"
        stage("gatesgarth") {
            matrix {
                agent {
                    docker {
			image "cart.lge.com/swte/yocto:18.04"
		    }
                }
                axes {
                    axis {
                        name "MACHINE"
                        values "qemuarm64", "qemuarm", "qemux86-64", "qemux86", "raspberrypi2"
                    }
                }
                stages {
                    stage("Setup") {
                        steps {
			    cleanWs disableDeferredWipeout: true
                            git branch: "gatesgarth", url: "http://mod.lge.com/hub/yocto/build-sample.git"
                            sh "git submodule update --init"
                        }
                    }
                    stage("Test") {
                        environment {
                            MACHINE = "${MACHINE}"
			    DL_DIR = "${env.WORKSPACE}/build-res/downloads"
			    SSTATE_DIR = "${env.WORKSPACE}/build-res/sstate-cache"
			    BB_GENERATE_MIRROR_TARBALLS = "1"
                        }
                        steps {
                            sh '''
                            TEMPLATECONF=`pwd`/build-templates . poky/oe-init-build-env
                            export BB_ENV_EXTRAWHITE="$BB_ENV_EXTRAWHITE DL_DIR SSTATE_DIR BB_GENERATE_MIRROR_TARBALLS"
                            bitbake-layers add-layer ../meta-sample-test
                            bitbake core-image-minimal --runall=fetch
                            bitbake core-image-minimal
                            bitbake core-image-minimal -c coverageall
                            '''
                        }
                    }
		    stage("Cleanup") {
			steps {
			    sh "rm -rf ${env.WORKSPACE}/build-res/downloads/git2"
			    sh "rm -rf ${env.WORKSPACE}/build-res/downloads/svn"
			    sh "find ${env.WORKSPACE}/build-res/downloads -type f -name '*.done' -delete"
			}
		    }
                    stage("Upload") {
                        environment {
                            AUTH = credentials("df64c294-9273-4b28-9625-a276771388c5")
                        }
                        steps {
                            dir("${env.WORKSPACE}/build-res") {
                                sh 'find . -type f -exec curl -u$AUTH_USR:$AUTH_PSW -T {} http://cart.lge.com/yocto-mirrors/{} \\;'
                            }
                        }
                    }
                }
            }  // matrix
        }  // stage
        stage("dunfell") {
            matrix {
                agent {
                    docker {
			image "cart.lge.com/swte/yocto:16.04"
		    }
                }
                axes {
                    axis {
                        name "MACHINE"
                        values "qemuarm64", "qemuarm", "qemux86-64", "qemux86", "raspberrypi2"
                    }
                }
                stages {
                    stage("Setup") {
                        steps {
			    cleanWs disableDeferredWipeout: true
                            git branch: "dunfell", url: "http://mod.lge.com/hub/yocto/build-sample.git"
                            sh "git submodule update --init"
                        }
                    }
                    stage("Test") {
                        environment {
                            MACHINE = "${MACHINE}"
			    DL_DIR = "${env.WORKSPACE}/build-res/downloads"
			    SSTATE_DIR = "${env.WORKSPACE}/build-res/sstate-cache"
			    BB_GENERATE_MIRROR_TARBALLS = "1"
                        }
                        steps {
                            sh '''
                            TEMPLATECONF=`pwd`/build-templates . poky/oe-init-build-env
                            export BB_ENV_EXTRAWHITE="$BB_ENV_EXTRAWHITE DL_DIR SSTATE_DIR BB_GENERATE_MIRROR_TARBALLS"
                            bitbake-layers add-layer ../meta-sample-test
                            bitbake core-image-minimal --runall=fetch
                            bitbake core-image-minimal
                            bitbake core-image-minimal -c coverageall
                            '''
                        }
                    }
		    stage("Cleanup") {
			steps {
			    sh "rm -rf ${env.WORKSPACE}/build-res/downloads/git2"
			    sh "rm -rf ${env.WORKSPACE}/build-res/downloads/svn"
			    sh "find ${env.WORKSPACE}/build-res/downloads -type f -name '*.done' -delete"
			}
		    }
                    stage("Upload") {
                        environment {
                            AUTH = credentials("df64c294-9273-4b28-9625-a276771388c5")
                        }
                        steps {
                            dir("${env.WORKSPACE}/build-res") {
                                sh 'find . -type f -exec curl -u$AUTH_USR:$AUTH_PSW -T {} http://cart.lge.com/yocto-mirrors/{} \\;'
                            }
                        }
                    }
                }
            }  // matrix
        }  // stage
        stage("zeus") {
            matrix {
                agent {
                    docker {
			image "cart.lge.com/swte/yocto:16.04"
		    }
                }
                axes {
                    axis {
                        name "MACHINE"
                        values "qemuarm64", "qemuarm", "qemux86-64", "qemux86", "raspberrypi2"
                    }
                }
                stages {
                    stage("Setup") {
                        steps {
			    cleanWs disableDeferredWipeout: true
                            git branch: "zeus", url: "http://mod.lge.com/hub/yocto/build-sample.git"
                            sh "git submodule update --init"
                        }
                    }
                    stage("Test") {
                        environment {
                            MACHINE = "${MACHINE}"
			    DL_DIR = "${env.WORKSPACE}/build-res/downloads"
			    SSTATE_DIR = "${env.WORKSPACE}/build-res/sstate-cache"
			    BB_GENERATE_MIRROR_TARBALLS = "1"
                        }
                        steps {
                            sh '''
                            TEMPLATECONF=`pwd`/build-templates . poky/oe-init-build-env
                            export BB_ENV_EXTRAWHITE="$BB_ENV_EXTRAWHITE DL_DIR SSTATE_DIR BB_GENERATE_MIRROR_TARBALLS"
                            bitbake-layers add-layer ../meta-sample-test
                            bitbake core-image-minimal --runall=fetch
                            bitbake core-image-minimal
                            bitbake core-image-minimal -c coverageall
                            '''
                        }
                    }
		    stage("Cleanup") {
			steps {
			    sh "rm -rf ${env.WORKSPACE}/build-res/downloads/git2"
			    sh "rm -rf ${env.WORKSPACE}/build-res/downloads/svn"
			    sh "find ${env.WORKSPACE}/build-res/downloads -type f -name '*.done' -delete"
			}
		    }
                    stage("Upload") {
                        environment {
                            AUTH = credentials("df64c294-9273-4b28-9625-a276771388c5")
                        }
                        steps {
                            dir("${env.WORKSPACE}/build-res") {
                                sh 'find . -type f -exec curl -u$AUTH_USR:$AUTH_PSW -T {} http://cart.lge.com/yocto-mirrors/{} \\;'
                            }
                        }
                    }
                }
            }  // matrix
        }  // stage
        stage("warrior") {
            matrix {
                agent {
                    docker {
			image "cart.lge.com/swte/yocto:16.04"
		    }
                }
                axes {
                    axis {
                        name "MACHINE"
                        values "qemuarm64", "qemuarm", "qemux86-64", "qemux86", "raspberrypi2"
                    }
                }
                stages {
                    stage("Setup") {
                        steps {
			    cleanWs disableDeferredWipeout: true
                            git branch: "warrior", url: "http://mod.lge.com/hub/yocto/build-sample.git"
                            sh "git submodule update --init"
                        }
                    }
                    stage("Test") {
                        environment {
                            MACHINE = "${MACHINE}"
			    DL_DIR = "${env.WORKSPACE}/build-res/downloads"
			    SSTATE_DIR = "${env.WORKSPACE}/build-res/sstate-cache"
			    BB_GENERATE_MIRROR_TARBALLS = "1"
                        }
                        steps {
                            sh '''
                            TEMPLATECONF=`pwd`/build-templates . poky/oe-init-build-env
                            export BB_ENV_EXTRAWHITE="$BB_ENV_EXTRAWHITE DL_DIR SSTATE_DIR BB_GENERATE_MIRROR_TARBALLS"
                            bitbake-layers add-layer ../meta-sample-test
                            bitbake core-image-minimal --runall=fetch
                            bitbake core-image-minimal
                            bitbake core-image-minimal -c coverageall
                            '''
                        }
                    }
		    stage("Cleanup") {
			steps {
			    sh "rm -rf ${env.WORKSPACE}/build-res/downloads/git2"
			    sh "rm -rf ${env.WORKSPACE}/build-res/downloads/svn"
			    sh "find ${env.WORKSPACE}/build-res/downloads -type f -name '*.done' -delete"
			}
		    }
                    stage("Upload") {
                        environment {
                            AUTH = credentials("df64c294-9273-4b28-9625-a276771388c5")
                        }
                        steps {
                            dir("${env.WORKSPACE}/build-res") {
                                sh 'find . -type f -exec curl -u$AUTH_USR:$AUTH_PSW -T {} http://cart.lge.com/yocto-mirrors/{} \\;'
                            }
                        }
                    }
                }
            }  // matrix
        }  // stage
        stage("thud") {
            matrix {
                agent {
                    docker {
			image "cart.lge.com/swte/yocto:16.04"
		    }
                }
                axes {
                    axis {
                        name "MACHINE"
                        values "qemuarm64", "qemuarm", "qemux86-64", "qemux86", "raspberrypi2"
                    }
                }
                stages {
                    stage("Setup") {
                        steps {
			    cleanWs disableDeferredWipeout: true
                            git branch: "thud", url: "http://mod.lge.com/hub/yocto/build-sample.git"
                            sh "git submodule update --init"
                        }
                    }
                    stage("Test") {
                        environment {
                            MACHINE = "${MACHINE}"
			    DL_DIR = "${env.WORKSPACE}/build-res/downloads"
			    SSTATE_DIR = "${env.WORKSPACE}/build-res/sstate-cache"
			    BB_GENERATE_MIRROR_TARBALLS = "1"
                        }
                        steps {
                            sh '''
                            TEMPLATECONF=`pwd`/build-templates . poky/oe-init-build-env
                            export BB_ENV_EXTRAWHITE="$BB_ENV_EXTRAWHITE DL_DIR SSTATE_DIR BB_GENERATE_MIRROR_TARBALLS"
                            bitbake-layers add-layer ../meta-sample-test
                            bitbake core-image-minimal --runall=fetch
                            bitbake core-image-minimal
                            bitbake core-image-minimal -c coverageall
                            '''
                        }
                    }
		    stage("Cleanup") {
			steps {
			    sh "rm -rf ${env.WORKSPACE}/build-res/downloads/git2"
			    sh "rm -rf ${env.WORKSPACE}/build-res/downloads/svn"
			    sh "find ${env.WORKSPACE}/build-res/downloads -type f -name '*.done' -delete"
			}
		    }
                    stage("Upload") {
                        environment {
                            AUTH = credentials("df64c294-9273-4b28-9625-a276771388c5")
                        }
                        steps {
                            dir("${env.WORKSPACE}/build-res") {
                                sh 'find . -type f -exec curl -u$AUTH_USR:$AUTH_PSW -T {} http://cart.lge.com/yocto-mirrors/{} \\;'
                            }
                        }
                    }
                }
            }  // matrix
        }  // stage
        stage("sumo") {
            matrix {
                agent {
                    docker {
			image "cart.lge.com/swte/yocto:16.04"
		    }
                }
                axes {
                    axis {
                        name "MACHINE"
                        values "qemuarm64", "qemuarm", "qemux86-64", "qemux86", "raspberrypi2"
                    }
                }
                stages {
                    stage("Setup") {
                        steps {
			    cleanWs disableDeferredWipeout: true
                            git branch: "sumo", url: "http://mod.lge.com/hub/yocto/build-sample.git"
                            sh "git submodule update --init"
                        }
                    }
                    stage("Test") {
                        environment {
                            MACHINE = "${MACHINE}"
			    DL_DIR = "${env.WORKSPACE}/build-res/downloads"
			    SSTATE_DIR = "${env.WORKSPACE}/build-res/sstate-cache"
			    BB_GENERATE_MIRROR_TARBALLS = "1"
                        }
                        steps {
                            sh '''
                            TEMPLATECONF=`pwd`/build-templates . poky/oe-init-build-env
                            export BB_ENV_EXTRAWHITE="$BB_ENV_EXTRAWHITE DL_DIR SSTATE_DIR BB_GENERATE_MIRROR_TARBALLS"
                            bitbake-layers add-layer ../meta-sample-test
                            bitbake core-image-minimal --runall=fetch
                            bitbake core-image-minimal
                            bitbake core-image-minimal -c coverageall
                            '''
                        }
                    }
		    stage("Cleanup") {
			steps {
			    sh "rm -rf ${env.WORKSPACE}/build-res/downloads/git2"
			    sh "rm -rf ${env.WORKSPACE}/build-res/downloads/svn"
			    sh "find ${env.WORKSPACE}/build-res/downloads -type f -name '*.done' -delete"
			}
		    }
                    stage("Upload") {
                        environment {
                            AUTH = credentials("df64c294-9273-4b28-9625-a276771388c5")
                        }
                        steps {
                            dir("${env.WORKSPACE}/build-res") {
                                sh 'find . -type f -exec curl -u$AUTH_USR:$AUTH_PSW -T {} http://cart.lge.com/yocto-mirrors/{} \\;'
                            }
                        }
                    }
                }
            }  // matrix
        }  // stage
        stage("rocko") {
            matrix {
                agent {
                    docker {
			image "cart.lge.com/swte/yocto:16.04"
		    }
                }
                axes {
                    axis {
                        name "MACHINE"
                        values "qemuarm64", "qemuarm", "qemux86-64", "qemux86", "raspberrypi2"
                    }
                }
                stages {
                    stage("Setup") {
                        steps {
			    cleanWs disableDeferredWipeout: true
                            git branch: "rocko", url: "http://mod.lge.com/hub/yocto/build-sample.git"
                            sh "git submodule update --init"
                        }
                    }
                    stage("Test") {
                        environment {
                            MACHINE = "${MACHINE}"
			    DL_DIR = "${env.WORKSPACE}/build-res/downloads"
			    SSTATE_DIR = "${env.WORKSPACE}/build-res/sstate-cache"
			    BB_GENERATE_MIRROR_TARBALLS = "1"
                        }
                        steps {
                            sh '''
                            TEMPLATECONF=`pwd`/build-templates . poky/oe-init-build-env
                            export BB_ENV_EXTRAWHITE="$BB_ENV_EXTRAWHITE DL_DIR SSTATE_DIR BB_GENERATE_MIRROR_TARBALLS"
                            bitbake-layers add-layer ../meta-sample-test
                            bitbake core-image-minimal --runall=fetch
                            bitbake core-image-minimal
                            bitbake core-image-minimal -c coverageall
                            '''
                        }
                    }
		    stage("Cleanup") {
			steps {
			    sh "rm -rf ${env.WORKSPACE}/build-res/downloads/git2"
			    sh "rm -rf ${env.WORKSPACE}/build-res/downloads/svn"
			    sh "find ${env.WORKSPACE}/build-res/downloads -type f -name '*.done' -delete"
			}
		    }
                    stage("Upload") {
                        environment {
                            AUTH = credentials("df64c294-9273-4b28-9625-a276771388c5")
                        }
                        steps {
                            dir("${env.WORKSPACE}/build-res") {
                                sh 'find . -type f -exec curl -u$AUTH_USR:$AUTH_PSW -T {} http://cart.lge.com/yocto-mirrors/{} \\;'
                            }
                        }
                    }
                }
            }  // matrix
        }  // stage
        stage("pyro") {
            matrix {
                agent {
                    docker {
			image "cart.lge.com/swte/yocto:16.04"
		    }
                }
                axes {
                    axis {
                        name "MACHINE"
                        values "qemuarm64", "qemuarm", "qemux86-64", "qemux86", "raspberrypi2"
                    }
                }
                stages {
                    stage("Setup") {
                        steps {
			    cleanWs disableDeferredWipeout: true
                            git branch: "pyro", url: "http://mod.lge.com/hub/yocto/build-sample.git"
                            sh "git submodule update --init"
                        }
                    }
                    stage("Test") {
                        environment {
                            MACHINE = "${MACHINE}"
			    DL_DIR = "${env.WORKSPACE}/build-res/downloads"
			    SSTATE_DIR = "${env.WORKSPACE}/build-res/sstate-cache"
			    BB_GENERATE_MIRROR_TARBALLS = "1"
                        }
                        steps {
                            sh '''
                            TEMPLATECONF=`pwd`/build-templates . poky/oe-init-build-env
                            export BB_ENV_EXTRAWHITE="$BB_ENV_EXTRAWHITE DL_DIR SSTATE_DIR BB_GENERATE_MIRROR_TARBALLS"
                            bitbake-layers add-layer ../meta-sample-test
                            bitbake core-image-minimal --runall=fetch
                            bitbake core-image-minimal
                            bitbake core-image-minimal -c coverageall
                            '''
                        }
                    }
		    stage("Cleanup") {
			steps {
			    sh "rm -rf ${env.WORKSPACE}/build-res/downloads/git2"
			    sh "rm -rf ${env.WORKSPACE}/build-res/downloads/svn"
			    sh "find ${env.WORKSPACE}/build-res/downloads -type f -name '*.done' -delete"
			}
		    }
                    stage("Upload") {
                        environment {
                            AUTH = credentials("df64c294-9273-4b28-9625-a276771388c5")
                        }
                        steps {
                            dir("${env.WORKSPACE}/build-res") {
                                sh 'find . -type f -exec curl -u$AUTH_USR:$AUTH_PSW -T {} http://cart.lge.com/yocto-mirrors/{} \\;'
                            }
                        }
                    }
                }
            }  // matrix
        }  // stage
        stage("morty") {
            matrix {
                agent {
                    docker {
			image "cart.lge.com/swte/yocto:16.04"
		    }
                }
                axes {
                    axis {
                        name "MACHINE"
                        values "qemuarm64", "qemuarm", "qemux86-64", "qemux86", "raspberrypi2"
                    }
                }
                stages {
                    stage("Setup") {
                        steps {
			    cleanWs disableDeferredWipeout: true
                            git branch: "morty", url: "http://mod.lge.com/hub/yocto/build-sample.git"
                            sh "git submodule update --init"
                        }
                    }
                    stage("Test") {
                        environment {
                            MACHINE = "${MACHINE}"
			    DL_DIR = "${env.WORKSPACE}/build-res/downloads"
			    SSTATE_DIR = "${env.WORKSPACE}/build-res/sstate-cache"
			    BB_GENERATE_MIRROR_TARBALLS = "1"
                        }
                        steps {
                            sh '''
                            TEMPLATECONF=`pwd`/build-templates . poky/oe-init-build-env
                            export BB_ENV_EXTRAWHITE="$BB_ENV_EXTRAWHITE DL_DIR SSTATE_DIR BB_GENERATE_MIRROR_TARBALLS"
                            bitbake-layers add-layer ../meta-sample-test
                            bitbake core-image-minimal -c fetchall
                            bitbake core-image-minimal
                            bitbake core-image-minimal -c coverageall
                            '''
                        }
                    }
		    stage("Cleanup") {
			steps {
			    sh "rm -rf ${env.WORKSPACE}/build-res/downloads/git2"
			    sh "rm -rf ${env.WORKSPACE}/build-res/downloads/svn"
			    sh "find ${env.WORKSPACE}/build-res/downloads -type f -name '*.done' -delete"
			}
		    }
                    stage("Upload") {
                        environment {
                            AUTH = credentials("df64c294-9273-4b28-9625-a276771388c5")
                        }
                        steps {
                            dir("${env.WORKSPACE}/build-res") {
                                sh 'find . -type f -exec curl -u$AUTH_USR:$AUTH_PSW -T {} http://cart.lge.com/yocto-mirrors/{} \\;'
                            }
                        }
                    }
                }
            }  // matrix
        }  // stage
        stage("krogoth") {
            matrix {
                agent {
                    docker {
			image "cart.lge.com/swte/yocto:16.04"
		    }
                }
                axes {
                    axis {
                        name "MACHINE"
                        values "qemuarm64", "qemuarm", "qemux86-64", "qemux86", "raspberrypi2"
                    }
                }
                stages {
                    stage("Setup") {
                        steps {
			    cleanWs disableDeferredWipeout: true
                            git branch: "krogoth", url: "http://mod.lge.com/hub/yocto/build-sample.git"
                            sh "git submodule update --init"
                        }
                    }
                    stage("Test") {
                        environment {
                            MACHINE = "${MACHINE}"
			    DL_DIR = "${env.WORKSPACE}/build-res/downloads"
			    SSTATE_DIR = "${env.WORKSPACE}/build-res/sstate-cache"
			    BB_GENERATE_MIRROR_TARBALLS = "1"
                        }
                        steps {
                            sh '''
                            TEMPLATECONF=`pwd`/build-templates . poky/oe-init-build-env
                            export BB_ENV_EXTRAWHITE="$BB_ENV_EXTRAWHITE DL_DIR SSTATE_DIR BB_GENERATE_MIRROR_TARBALLS"
                            bitbake-layers add-layer ../meta-sample-test
                            bitbake core-image-minimal -c fetchall
                            bitbake core-image-minimal
                            bitbake core-image-minimal -c coverageall
                            '''
                        }
                    }
		    stage("Cleanup") {
			steps {
			    sh "rm -rf ${env.WORKSPACE}/build-res/downloads/git2"
			    sh "rm -rf ${env.WORKSPACE}/build-res/downloads/svn"
			    sh "find ${env.WORKSPACE}/build-res/downloads -type f -name '*.done' -delete"
			}
		    }
                    stage("Upload") {
                        environment {
                            AUTH = credentials("df64c294-9273-4b28-9625-a276771388c5")
                        }
                        steps {
                            dir("${env.WORKSPACE}/build-res") {
                                sh 'find . -type f -exec curl -u$AUTH_USR:$AUTH_PSW -T {} http://cart.lge.com/yocto-mirrors/{} \\;'
                            }
                        }
                    }
                }
            }  // matrix
        }  // stage
        stage("jethro") {
            matrix {
                agent {
                    docker {
			image "cart.lge.com/swte/yocto:16.04"
		    }
                }
                axes {
                    axis {
                        name "MACHINE"
                        values "qemuarm64", "qemuarm", "qemux86-64", "qemux86", "raspberrypi2"
                    }
                }
                stages {
                    stage("Setup") {
                        steps {
			    cleanWs disableDeferredWipeout: true
                            git branch: "jethro", url: "http://mod.lge.com/hub/yocto/build-sample.git"
                            sh "git submodule update --init"
                        }
                    }
                    stage("Test") {
                        environment {
                            MACHINE = "${MACHINE}"
			    DL_DIR = "${env.WORKSPACE}/build-res/downloads"
			    SSTATE_DIR = "${env.WORKSPACE}/build-res/sstate-cache"
			    BB_GENERATE_MIRROR_TARBALLS = "1"
                        }
                        steps {
                            sh '''
                            TEMPLATECONF=`pwd`/build-templates . poky/oe-init-build-env
                            export BB_ENV_EXTRAWHITE="$BB_ENV_EXTRAWHITE DL_DIR SSTATE_DIR BB_GENERATE_MIRROR_TARBALLS"
                            bitbake-layers add-layer ../meta-sample-test
                            bitbake core-image-minimal -c fetchall
                            bitbake core-image-minimal
                            bitbake core-image-minimal -c coverageall
                            '''
                        }
                    }
		    stage("Cleanup") {
			steps {
			    sh "rm -rf ${env.WORKSPACE}/build-res/downloads/git2"
			    sh "rm -rf ${env.WORKSPACE}/build-res/downloads/svn"
			    sh "find ${env.WORKSPACE}/build-res/downloads -type f -name '*.done' -delete"
			}
		    }
                    stage("Upload") {
                        environment {
                            AUTH = credentials("df64c294-9273-4b28-9625-a276771388c5")
                        }
                        steps {
                            dir("${env.WORKSPACE}/build-res") {
                                sh 'find . -type f -exec curl -u$AUTH_USR:$AUTH_PSW -T {} http://cart.lge.com/yocto-mirrors/{} \\;'
                            }
                        }
                    }
                }
            }  // matrix
        }  // stage
    }  // stages
}  // pipeline
